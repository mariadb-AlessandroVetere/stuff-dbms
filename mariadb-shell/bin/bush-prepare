#!/bin/bash
from_home=$(cat <<EOF
.gdbinit
.emacs
.gitconfig
.inputrc
.profile
.screenrc
.local
.config
.aptitude
EOF
)

me=$(basename "$0")

optstring_long="update,source-from:,verbose,help"
optstring_short="us:c:vh"

opts=$(getopt -o "${optstring_short}" --long "${optstring_long}" --name "$0" -- "$@") ||
    exit $?
eval set -- "$opts"

update=false
unset source_from
clone_from="git@github.com:tempesta-tech/mariadb_10.2.git"
unset verbose_on
unset verbose_off
unset verbose
verbose_echo="true"

while true
do
    case "$1" in
        -s|--source-from|--source)
            source_from=$2
            shift 2;;
        -c|--clone-from|--clone)
            clone_from=$2
            shift 2;;
        -u|--update)
            update=true
            shift;;
        -v|--verbose)
            verbose_on="set -x"
            verbose_off="set +x"
            verbose="verbose_cmd"
            verbose_echo="echo +"
            shift;;
        -h|--help)
            cat <<EOF
FIXME: this is help!
EOF
            exit;;
        --) shift; break;;
    esac
done

[ -z "$1" ] && {
    echo "$me: missing DIRECTORY argument!" >&2
    exit 1
}

verbose_cmd()
{
    echo "+ $*"
    local flags=$-
    set +x
    "$@"
    set -$flags
}

homepath=$HOME/src/mariadb
bush_name=$1
m=$homepath/$bush_name
skel=$homepath/data/skel

if [ "$update" = false -a -e "$m" ]
then
    echo "$me: $m exists!" >&2
    exit 1
fi

set -e
mkdir -p "$m"
$verbose cd "$m"

link() # link from $1 for $2
{
    $verbose_echo "link $*"
    if [ "$force_link" = yes -o -e "$1/$2" ]
    then
        $update &&
            rm -rf "$2"
        ln -sT "$1/$2" "$2"
    fi
}

unset force_link

for src in $from_home
do
    link "$HOME" "$src"
done

force_link="yes"

link "$homepath" bin
link "${homepath}/bin" env.sh

cat <<EOF > .bashrc
source ~$USER/.bashrc
export bush_name=\$(basename \$HOME)
export PS1="{\$bush_name} \${PS1}"
export CDPATH=".:~"

reconf()
{
    source ~/.bashrc
}

source ~/env.sh

[ "\$STY" ] && trap 'debug_trap' DEBUG
EOF

$verbose_echo "Wrote .bashrc"

if ! $update
then
    HOME=$m
    source .bashrc || true
    $verbose git clone "${clone_from}" src
    $verbose prepare
fi

$verbose cp -a $skel/. .
