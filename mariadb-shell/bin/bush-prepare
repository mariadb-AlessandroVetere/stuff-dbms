#!/bin/bash
from_home=$(cat <<EOF
.gdbinit
.emacs
.gitconfig
.inputrc
.profile
.screenrc
.local
.config
.aptitude
.bash_profile
EOF
)

me=$(basename "$0")

optstring_long="update,project,links,skel,copy-from:,copy:,clone-from:,clone:,force-cleanup,force,verbose,help"
optstring_short="uplkc:C:Fvh"

opts=$(getopt -o "${optstring_short}" --long "${optstring_long}" --name "$0" -- "$@") ||
    exit $?
eval set -- "$opts"

update=false
selection=false
select_project=false
select_links=false
select_skel=false
copy_from=
clone_from="samu git@github.com:mariadb-corporation/mariadb-samurai.git"
remote_add="mariadb git@github.com:MariaDB/server.git"
checkout="10.4.20samurai"
submodules="extra/wolfssl/wolfssl libmariadb"
force_cleanup=false
unset verbose_on
unset verbose_off
unset verbose
unset CDPATH
verbose_echo="true"

while true
do
    case "$1" in
        -c|--copy-from|--copy)
            copy_from=$2
            shift 2;;
        -C|--clone-from|--clone)
            [ "$2" -a "$2" != '-' ] &&
                clone_from=$2
            # FIXME: prepend "origin" if there is no remote name
            shift 2;;
        -F|--force-cleanup|--force)
            force_cleanup=true
            shift;;
        -u|--update)
            update=true
            shift;;
        -p|--project)
            update=true
            selection=true
            select_project=true
            shift;;
        -l|--links)
            update=true
            selection=true
            select_links=true
            shift;;
        -k|--skel)
            update=true
            selection=true
            select_skel=true
            shift;;
        -v|--verbose)
            verbose_on="set -x"
            verbose_off="set +x"
            verbose="verbose_cmd"
            verbose_echo="echo +"
            shift;;
        -h|--help)
            cat <<EOF
        -c|--copy-from|--copy   Local repo
        -C|--clone-from|--clone     Remote repo
        -u|--update                 Update files even if repo exists
        -F|--force-cleanup|--force  Delete everything in existing repo!
        -p|--project                Update project
        -l|--links                  Update links
        -k|--skel                   Update skel
        -v|--verbose                Work verbosely
        -h|--help                   This help

EOF
            exit;;
        --) shift; break;;
    esac
done

verbose_cmd()
{
    echo "+ $*"
    local flags=$-
    set +x
    "$@"
    set -$flags
}

if [ -n "$bush_name" ]
then
    [ $(basename $HOME) != "$bush_name" ] && {
        echo "$me: unexpected \$bush_name value!"
        exit 2
    }
    $verbose_echo "Already inside '${bush_name}' bush!"
    eval HOME=~$USER
else
    bush_name=$1
fi

homepath=$HOME/src/mariadb
m=$homepath/$bush_name
data=$homepath/data

[ -z "$bush_name" ] && {
    echo "$me: missing DIRECTORY argument!" >&2
    exit 1
}


if [ "$update" = false -a -e "$m" ]
then
    if [ -d "$m" -a "$force_cleanup" = true ]
    then
        echo "Deleting everything in ${m}!"
        rm -rf "$m"
    else
        echo "$me: $m exists!" >&2
        exit 1
    fi
fi

trap debug
set -e
mkdir -p "$m"
$verbose cd "$m"

link() # link from $1 for $2
{
    $verbose_echo "link $*"
    if [ "$force_link" = yes -o -e "$1/$2" ]
    then
        $update &&
            rm -rf "$2"
        ln -sT "$1/$2" "$2"
    fi
}

instantiate()
{
    eval echo "\"$(cat $data/$1)\"" > "$2"
}

make_links()
{
    unset force_link

    for conf in $from_home
    do
        link "$HOME" "$conf"
    done
    unset conf

    force_link="yes"

    link "$homepath" bin
    link "${homepath}/bin" env.sh
    unset force_link
    echo "Made links"
}

prepare_source()
{(
    if [ -z "${copy_from}" ]
    then
        $verbose git clone -n -o $clone_from src
        remote=$(echo "$clone_from"|(read a b; echo $a))
        cd src
        $verbose git checkout -b $checkout $remote/$checkout
        [[ "$submodules" ]] &&
            $verbose git submodule update --init --recursive $submodules
        $verbose git remote add $remote_add
    else
        $verbose rsync -aP "${homepath}/${copy_from}/src/" src
    fi
)}

copy_skel()
{
    $verbose cp -a $data/skel/. .
    echo "Copied skel files"
}

instantiate_project()
{
    mkdir -p src/.kdev4
    instantiate project.kdev4.in src/$bush_name.kdev4
    instantiate settings.kdev4.in src/.kdev4/$bush_name.kdev4
    echo "Wrote KDevelop project: src/$bush_name.kdev4"
}

if ! $selection || $select_links
then
    make_links
fi

HOME=$m

if ! $update
then
    prepare_source
fi

# This must be after prepare_source otherwise git clone fails on existing src/
if ! $selection || $select_skel
then
    copy_skel
fi

if ! $selection || $select_project
then
    instantiate_project
fi
