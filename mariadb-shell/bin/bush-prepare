#!/bin/bash
from_home=$(cat <<EOF
.gdbinit
.emacs
.gitconfig
.inputrc
.profile
.screenrc
.local
.config
.aptitude
EOF
)

me=$(basename "$0")

optstring_long="update,project,links,skel,refs,source-from:,source:,clone-from:,clone:,verbose,help"
optstring_short="uplkrs:c:vh"

opts=$(getopt -o "${optstring_short}" --long "${optstring_long}" --name "$0" -- "$@") ||
    exit $?
eval set -- "$opts"

update=false
selection=false
select_project=false
select_links=false
select_skel=false
select_refs=false
unset source_from
clone_from="git@github.com:tempesta-tech/mariadb_10.2.git"
unset verbose_on
unset verbose_off
unset verbose
verbose_echo="true"

while true
do
    case "$1" in
        -s|--source-from|--source)
            source_from=$2
            shift 2;;
        -c|--clone-from|--clone)
            clone_from=$2
            shift 2;;
        -u|--update)
            update=true
            shift;;
        -p|--project)
            update=true
            selection=true
            select_project=true
            shift;;
        -l|--links)
            update=true
            selection=true
            select_links=true
            shift;;
        -k|--skel)
            update=true
            selection=true
            select_skel=true
            shift;;
        -r|--refs)
            update=true
            selection=true
            select_refs=true
            shift;;
        -v|--verbose)
            verbose_on="set -x"
            verbose_off="set +x"
            verbose="verbose_cmd"
            verbose_echo="echo +"
            shift;;
        -h|--help)
            cat <<EOF
        -s|--source-from|--source   Local repo
        -c|--clone-from|--clone     Remote repo
        -u|--update                 Update files even if exist
        -p|--project                Update project
        -l|--links                  Update links
        -k|--skel                   Update skel
        -r|--refs                   Update Git refs
        -v|--verbose                Work verbosely
        -h|--help                   This help

EOF
            exit;;
        --) shift; break;;
    esac
done

verbose_cmd()
{
    echo "+ $*"
    local flags=$-
    set +x
    "$@"
    set -$flags
}

if [ -n "$bush_name" ]
then
    [ $(basename $HOME) != "$bush_name" ] && {
        echo "$me: unexpected \$bush_name value!"
        exit 2
    }
    $verbose_echo "Already inside '${bush_name}' bush!"
    eval HOME=~$USER
else
    bush_name=$1
fi

homepath=$HOME/src/mariadb
m=$homepath/$bush_name
data=$homepath/data

[ -z "$bush_name" ] && {
    echo "$me: missing DIRECTORY argument!" >&2
    exit 1
}


if [ "$update" = false -a -e "$m" ]
then
    echo "$me: $m exists!" >&2
    exit 1
fi

trap debug
set -e
mkdir -p "$m"
$verbose cd "$m"

link() # link from $1 for $2
{
    $verbose_echo "link $*"
    if [ "$force_link" = yes -o -e "$1/$2" ]
    then
        $update &&
            rm -rf "$2"
        ln -sT "$1/$2" "$2"
    fi
}

instantiate()
{
    eval echo "\"$(cat $data/$1)\"" > "$2"
}

make_links()
{
    unset force_link

    for conf in $from_home
    do
        link "$HOME" "$conf"
    done
    unset conf

    force_link="yes"

    link "$homepath" bin
    link "${homepath}/bin" env.sh
    unset force_link
    echo "Made links"
}

instantiate_bash()
{
    instantiate bashrc.in .bashrc
    echo "Wrote .bashrc"
}

prepare_source()
{
    if [ -z "${source_from}" ]
    then
        $verbose git clone "${clone_from}" src
    else
        $verbose rsync -aP "${source_from}/" src
    fi
}

make_refs()
{
    echo "ref: refs/heads/natsys/trunk" > 'src/.git/refs/heads/trunk'
    echo "ref: refs/heads/natsys/base" > 'src/.git/refs/heads/base'
    echo "Wrote branch refs in src/.git/refs/heads/"
}

copy_skel()
{
    $verbose cp -a $data/skel/. .
    echo "Copied skel files"
}

instantiate_project()
{
    mkdir -p src/.kdev4
    instantiate project.kdev4.in src/$bush_name.kdev4
    instantiate settings.kdev4.in src/.kdev4/$bush_name.kdev4
    echo "Wrote KDevelop project: src/$bush_name.kdev4"
}

if ! $selection || $select_links
then
    make_links
fi

HOME=$m

if ! $selection || $select_skel
then
    instantiate_bash
fi

set +e
source .bashrc || true
trap debug
set -e

if ! $update
then
    prepare_source
fi

if ! $selection || $select_refs
then
    make_refs
fi

if ! $selection || $select_skel
then
    copy_skel
fi

if ! $update
then
    $verbose prepare
fi

if ! $selection || $select_project
then
    instantiate_project
fi
